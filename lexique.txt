<<<<<<< HEAD
***sofiane,module re***
intro:
  # pour rechercher un mot dans une chaine de caractere 
  la class str est limité avec deux methodes "find" et replace 
  pour traité certain rechercher
  # le module re nous offre des methodes bien complete pour traité ce genre 
  de probleme
  exemple de recherche un numero de tel valide dans une chaine:

import re
chaine = ""
expression = r"^0[0-9]([ .-]?[0-9]{2}){4}$"
while re.search(expression, chaine) is None:
    chaine = input("Saisissez un numéro de téléphone (valide) :") 

la methode sub pour remplacé une expression reguliére dans une chaine
exemple:
 re.sub(r"-", r"_", "bruno - thomas")
affiche bruno - thomas
=======

#raise and assert exceptions

il existe différentes syntaxes pour releverles exception 

## Try/except

try: le bloc à essayer
except type_erreur as exception à retourner: 
print ("message d'erreur")

## try/ except/ except/ else
try:le bloc à essayer

except NameError:
    print("message erreur1")
except TypeError:
    print("message erreur2")
except ZeroDivisionError:
    print("message erreur 3")
else:
    print( resultat)

## try/except/finally

try:
     Test d'instruction(s)
except type_de_l_exception:
     Traitement en cas d'erreur
finally:
     Instruction(s) exécutée(s) qu'il y ait eu des erreurs ou non

## try/except/pass

try: le bloc à essayer
except type_erreur as exception à retourner:
  pass

Ne rien faire dans le cas de l'exception

## assert

assert test 

si le test renvoie true, il execute sinon une exception est levée (AssertionError)

## raise 
 raise TypeDe l'exception ("message à afficher")


# Gestion d'erreur et d'exception
## L'instruction try et except
L'instruction "try" permet d'exécuter une clause (flot d'instructions placé entre les mots clefs try et except), 
exécution qui s'interrompt et saute à l'instruction "except", en cas exception.
En bref:
- Si aucune exception n'intervient pendant l'exécution du "try", celle-ci se déroule jusqu'à sa complétion 
et l'instruction except est ignorée.
- Si une exception se produit lors de l'exécution du "try", celle-ci s'interrompt immédiatement et saute à
l'instruction "except", qui exécutera la clause "except" ou traitement de l'erreur.

NB: Plusieurs traitements d'erreurs (plusieurs "except") peuvent être pris en compte
NBii : Si une seule instrucion "except" est implémentée, celle-ci traitera indifféremment toutes les erreurs
qui se seront produites pendant l'exécution du "try"

Exemples:
 try:
    division = 1492/0
    print("result : {}".format(division))
 except:
    print("x:0 is beyound Python possibility")

 try:
    <execute clause>
 except <exception #1>:
    <execute type#1 exception clause>
 except <exception #2>:
    <execute type#2 exception clause>
    
Un tuple est un ensemble d’éléments comparable aux listes mais qui, une fois déclaré, ne peut plus être modifié. Exemple d'une date de naissance ne peux être modifiée.
Attention le tuple doit etre séparé par des points virgules.

c = (9,)
print(type(c))

d = ("one","two","three","viva",) 
print(type(d))

Les tuples sont des séquences non modifiables donc il n’est pas possible d’utiliser les méthodes remove()  ou append() par exemple, les [] sont prohibés.
 

>>>>>>> developpement
